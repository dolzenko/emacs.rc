url_completion_use_history = true;
// Readline normalization
define_key(text_keymap, 'C-M-h', 'cmd_deleteWordBackward');
define_key(text_keymap, 'C-h', 'cmd_deleteCharBackward');
define_key(text_keymap, 'C-k', 'cmd_deleteToEndOfLine');
define_key(minibuffer_keymap, "C-j", "exit-minibuffer");

// Copy text with 'y'
define_key(content_buffer_normal_keymap, "y", "copy", $browser_object = browser_object_dom_node);

// remove clock
remove_hook("mode_line_hook", mode_line_adder(clock_widget));

add_hook("mode_line_hook", mode_line_adder(buffer_count_widget), true);
add_hook("mode_line_hook", mode_line_adder(loading_count_widget), true);

define_key(default_global_keymap, "C-x C-b", "switch-to-buffer");
define_key(default_global_keymap, "C-x C-k", "kill-buffer");

// selection searches
function create_selection_search(webjump, key) {
    interactive(webjump+"-selection-search",
                "Search " + webjump + " with selection contents",
                "find-url-new-buffer",
                $browser_object = function (I) {
                    return webjump + " " + I.buffer.top_frame.getSelection();});
    define_key(content_buffer_normal_keymap, key.toUpperCase(), webjump + "-selection-search");

    interactive("prompted-"+webjump+"-search", null,
                function (I) {
                    var term = yield I.minibuffer.read_url($prompt = "Search "+webjump+":",
                                                           $initial_value = webjump+" ");
                    browser_object_follow(I.buffer, FOLLOW_DEFAULT, term);
                });
    define_key(content_buffer_normal_keymap, key, "prompted-" + webjump + "-search");
}
// examples
// TODO key for that
// create_selection_search("g","l");
create_selection_search("wikipedia","w");
// create_selection_search("dictionary","d");
// create_selection_search("myspace","y");
// create_selection_search("amazon","a");
create_selection_search("youtube","u");
minibuffer_read_url_select_initial = false;

require("client-redirect");
define_client_redirect("google-images",
    function (uri) {
        return /(images|www)\.google\.com$/.test(uri.host)
            && uri.filePath == "/imgres"
            && regexp_exec(/imgurl=([^&]+)/, uri.query, 1);
    });

// use M-y to google current selection in new buffer
// use M-Y to google current selection in new buffer "double-quoted"
// [ref: http://www.mozdev.org/pipermail/conkeror/2009-February/001334.html ]
// (See also "**c" for selecting text)
interactive("search-clipboard-contents", "Search in Google the content of the X clipboard (the selected text)",
              "find-url",
              $browser_object=
              function(I) {
                  return "g "+ read_from_x_primary_selection();
              }
);
interactive("search-clipboard-contents-doublequoted", "Search in Google the content of the X clipboard (the selected text) as a fixed string",
              "find-url",
              $browser_object=
              function(I) {
                  return "g \""+ read_from_x_primary_selection()+"\"";
              }

);
define_key(content_buffer_normal_keymap, "M-y", "search-clipboard-contents");
define_key(content_buffer_normal_keymap, "M-Y", "search-clipboard-contents-doublequoted");

// During a hints interaction, conkeror can display the URL and other
// information about the currently selected hint
hints_minibuffer_annotation_mode(true);

// Search results hints are started from 1..
require("page-modes/google-search-results.js");

add_hook("before_quit_hook",
         function () {
             var w = get_recent_conkeror_window();
             var result = (w == null) ||
                 "y" == (yield w.minibuffer.read_single_character_option(
                     $prompt = "Quit Conkeror? (y/n)",
                     $options = ["y", "n"]));
             yield co_return(result);
         });

hints_auto_exit_delay = 500;

function for_each_host_cookie(host, fn) {
    var cookies = cookie_manager.getCookiesFromHost(host);
    while (cookies.hasMoreElements()) {
        var cookie = cookies.getNext().QueryInterface(Components.interfaces.nsICookie2);
        fn(cookie);
    }
}

function clear_host_cookies(host) {
    for_each_host_cookie(host,
                         function (cookie) {
                             cookie_manager.remove(cookie.host, cookie.name, cookie.path, false);
                         });
}

interactive("clear-site-cookies", "Delete all cookies for the current site",
            function (I) {
                var host = I.buffer.current_uri.host;
                clear_host_cookies(host);
                I.minibuffer.message("Cookies cleared for " + host);
            });

content_handlers.set("*", content_handler_save);